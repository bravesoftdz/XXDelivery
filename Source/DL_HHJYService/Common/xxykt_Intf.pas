unit xxykt_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID = '{A9A957C1-6119-4C31-A8AA-6D006F52B2B9}';
const TargetNamespace = 'xxykt';
const Ixxykt_IID: TGUID = '{E4A4B947-25AD-47F6-A58B-72F8F31EF182}';
const xxykt_EndPointURI = 'http://xxtdrj.gnway.cc:81/xxykt.asmx';
type
  { Forward declarations }
  Ixxykt = interface;
  Ixxykt_Async = interface;
  Ixxykt_AsyncEx = interface;
  Coxxykt = class;
  Coxxykt_Async = class;
  Coxxykt_AsyncEx = class;
  Txxykt_Proxy = class;
  Txxykt_AsyncProxy = class;
  Txxykt_AsyncProxyEx = class;

  Ixxykt = interface(IROService)
  ['{e4a4b947-25ad-47f6-a58b-72f8f31ef182}']
    function Load_Data_mx(const sid: UnicodeString): UnicodeString;
    function Load_Inv(const cwhere: UnicodeString): UnicodeString;
    function Load_Cus(const cwhere: UnicodeString): UnicodeString;
    function Load_Ven(const cwhere: UnicodeString): UnicodeString;
    function Customer_YE(const cCusCode: UnicodeString): UnicodeString;
    function Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                         const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; const cCarNo: UnicodeString): UnicodeString;
    function Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                         const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString): UnicodeString;
    function VenInv(const cVenCode: UnicodeString): UnicodeString;
  end;

  Ixxykt_Async = interface(IROAsyncInterface)
  ['{61bf5565-e049-487a-8572-fedb4bf90ea9}']
    procedure Invoke_Load_Data_mx(const sid: UnicodeString);
    procedure Invoke_Load_Inv(const cwhere: UnicodeString);
    procedure Invoke_Load_Cus(const cwhere: UnicodeString);
    procedure Invoke_Load_Ven(const cwhere: UnicodeString);
    procedure Invoke_Customer_YE(const cCusCode: UnicodeString);
    procedure Invoke_Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                                 const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                                 const cCarNo: UnicodeString);
    procedure Invoke_Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                                 const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString);
    procedure Invoke_VenInv(const cVenCode: UnicodeString);
    function Retrieve_Load_Data_mx: UnicodeString;
    function Retrieve_Load_Inv: UnicodeString;
    function Retrieve_Load_Cus: UnicodeString;
    function Retrieve_Load_Ven: UnicodeString;
    function Retrieve_Customer_YE: UnicodeString;
    function Retrieve_Insert_Sale: UnicodeString;
    function Retrieve_Insert_Rd01: UnicodeString;
    function Retrieve_VenInv: UnicodeString;
  end;

  Ixxykt_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{6b8d9f5b-e449-4ef3-b0bb-76c0959c3a49}']
    function BeginLoad_Data_mx(const sid: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Inv(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Cus(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Ven(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCustomer_YE(const cCusCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                              const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                              const cCarNo: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                              const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginVenInv(const cVenCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndLoad_Data_mx(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Inv(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Cus(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Ven(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCustomer_YE(const aRequest: IROAsyncRequest): UnicodeString;
    function EndInsert_Sale(const aRequest: IROAsyncRequest): UnicodeString;
    function EndInsert_Rd01(const aRequest: IROAsyncRequest): UnicodeString;
    function EndVenInv(const aRequest: IROAsyncRequest): UnicodeString;
  end;

  Coxxykt = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt; overload;
    class function Create(const aUri: TROUri): Ixxykt; overload;
    class function Create(const aUrl: String): Ixxykt; overload;
  end;

  Coxxykt_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt_Async; overload;
    class function Create(const aUri: TROUri): Ixxykt_Async; overload;
    class function Create(const aUrl: String): Ixxykt_Async; overload;
  end;

  Coxxykt_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt_AsyncEx; overload;
    class function Create(const aUri: TROUri): Ixxykt_AsyncEx; overload;
    class function Create(const aUrl: String): Ixxykt_AsyncEx; overload;
  end;

  Txxykt_Proxy = class(TROProxy, Ixxykt)
  protected
    function __GetInterfaceName: String; override; 
    function Load_Data_mx(const sid: UnicodeString): UnicodeString;
    function Load_Inv(const cwhere: UnicodeString): UnicodeString;
    function Load_Cus(const cwhere: UnicodeString): UnicodeString;
    function Load_Ven(const cwhere: UnicodeString): UnicodeString;
    function Customer_YE(const cCusCode: UnicodeString): UnicodeString;
    function Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                         const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; const cCarNo: UnicodeString): UnicodeString;
    function Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                         const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString): UnicodeString;
    function VenInv(const cVenCode: UnicodeString): UnicodeString;
  end;

  Txxykt_AsyncProxy = class(TROAsyncProxy, Ixxykt_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_Load_Data_mx(const sid: UnicodeString);
    procedure Invoke_Load_Inv(const cwhere: UnicodeString);
    procedure Invoke_Load_Cus(const cwhere: UnicodeString);
    procedure Invoke_Load_Ven(const cwhere: UnicodeString);
    procedure Invoke_Customer_YE(const cCusCode: UnicodeString);
    procedure Invoke_Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                                 const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                                 const cCarNo: UnicodeString);
    procedure Invoke_Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                                 const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString);
    procedure Invoke_VenInv(const cVenCode: UnicodeString);
    function Retrieve_Load_Data_mx: UnicodeString;
    function Retrieve_Load_Inv: UnicodeString;
    function Retrieve_Load_Cus: UnicodeString;
    function Retrieve_Load_Ven: UnicodeString;
    function Retrieve_Customer_YE: UnicodeString;
    function Retrieve_Insert_Sale: UnicodeString;
    function Retrieve_Insert_Rd01: UnicodeString;
    function Retrieve_VenInv: UnicodeString;
  end;

  Txxykt_AsyncProxyEx = class(TROAsyncProxyEx, Ixxykt_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function BeginLoad_Data_mx(const sid: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Inv(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Cus(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLoad_Ven(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginCustomer_YE(const cCusCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                              const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                              const cCarNo: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                              const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginVenInv(const cVenCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndLoad_Data_mx(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Inv(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Cus(const aRequest: IROAsyncRequest): UnicodeString;
    function EndLoad_Ven(const aRequest: IROAsyncRequest): UnicodeString;
    function EndCustomer_YE(const aRequest: IROAsyncRequest): UnicodeString;
    function EndInsert_Sale(const aRequest: IROAsyncRequest): UnicodeString;
    function EndInsert_Rd01(const aRequest: IROAsyncRequest): UnicodeString;
    function EndVenInv(const aRequest: IROAsyncRequest): UnicodeString;
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function Coxxykt.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt;
begin
  result := Txxykt_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function Coxxykt.Create(const aUri: TROUri): Ixxykt;
begin
  result := Txxykt_Proxy.Create(aUri);
  exit;
end;

class function Coxxykt.Create(const aUrl: String): Ixxykt;
begin
  result := Txxykt_Proxy.Create(aUrl);
  exit;
end;

class function Coxxykt_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt_Async;
begin
  result := Txxykt_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function Coxxykt_Async.Create(const aUri: TROUri): Ixxykt_Async;
begin
  result := Txxykt_AsyncProxy.Create(aUri);
  exit;
end;

class function Coxxykt_Async.Create(const aUrl: String): Ixxykt_Async;
begin
  result := Txxykt_AsyncProxy.Create(aUrl);
  exit;
end;

class function Coxxykt_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): Ixxykt_AsyncEx;
begin
  result := Txxykt_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function Coxxykt_AsyncEx.Create(const aUri: TROUri): Ixxykt_AsyncEx;
begin
  result := Txxykt_AsyncProxyEx.Create(aUri);
  exit;
end;

class function Coxxykt_AsyncEx.Create(const aUrl: String): Ixxykt_AsyncEx;
begin
  result := Txxykt_AsyncProxyEx.Create(aUrl);
  exit;
end;

function Txxykt_Proxy.__GetInterfaceName: String;
begin
  result := 'xxykt';
  exit;
end;

function Txxykt_Proxy.Load_Data_mx(const sid: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Load_Data_mx', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Load_Data_mx', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Data_mx');
    lMessage.Write('sid', System.TypeInfo(UnicodeString), sid, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Load_Data_mxResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Load_Inv(const cwhere: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Load_Inv', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Load_Inv', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Inv');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Load_InvResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Load_Cus(const cwhere: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Load_Cus', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Load_Cus', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Cus');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Load_CusResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Load_Ven(const cwhere: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Load_Ven', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Load_Ven', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Ven');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Load_VenResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Customer_YE(const cCusCode: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Customer_YE', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Customer_YE', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Customer_YE');
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Customer_YEResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                                  const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                                  const cCarNo: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Insert_Sale', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Insert_Sale', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Sale');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    lMessage.Write('cCusName', System.TypeInfo(UnicodeString), cCusName, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('cInvName', System.TypeInfo(UnicodeString), cInvName, []);
    lMessage.Write('Ybm', System.TypeInfo(UnicodeString), Ybm, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('Cplx', System.TypeInfo(UnicodeString), Cplx, []);
    lMessage.Write('iDMoney', System.TypeInfo(UnicodeString), iDMoney, []);
    lMessage.Write('iYunfei', System.TypeInfo(UnicodeString), iYunfei, []);
    lMessage.Write('DJBH', System.TypeInfo(UnicodeString), DJBH, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Insert_SaleResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                                  const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/Insert_Rd01', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'Insert_Rd01', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Rd01');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCode', System.TypeInfo(UnicodeString), cCode, []);
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('iUnitCost', System.TypeInfo(UnicodeString), iUnitCost, []);
    lMessage.Write('iMoney', System.TypeInfo(UnicodeString), iMoney, []);
    lMessage.Write('cMemo1', System.TypeInfo(UnicodeString), cMemo1, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Insert_Rd01Result', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_Proxy.VenInv(const cVenCode: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                             'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['http://xxykt.org/VenInv', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                             'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                             'http://xxykt.org/', 'VenInv', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'VenInv');
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('VenInvResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'xxykt';
  exit;
end;

procedure Txxykt_AsyncProxy.Invoke_Load_Data_mx(const sid: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Load_Data_mx');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Load_Data_mx', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Load_Data_mx', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Data_mx');
    lMessage.Write('sid', System.TypeInfo(UnicodeString), sid, []);
    __DispatchAsyncRequest('Load_Data_mx', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Load_Inv(const cwhere: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Load_Inv');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Load_Inv', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Load_Inv', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Inv');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    __DispatchAsyncRequest('Load_Inv', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Load_Cus(const cwhere: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Load_Cus');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Load_Cus', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Load_Cus', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Cus');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    __DispatchAsyncRequest('Load_Cus', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Load_Ven(const cwhere: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Load_Ven');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Load_Ven', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Load_Ven', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Ven');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    __DispatchAsyncRequest('Load_Ven', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Customer_YE(const cCusCode: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Customer_YE');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Customer_YE', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Customer_YE', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Customer_YE');
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    __DispatchAsyncRequest('Customer_YE', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Insert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                                               const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                                               const cCarNo: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Insert_Sale');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Insert_Sale', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Insert_Sale', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Sale');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    lMessage.Write('cCusName', System.TypeInfo(UnicodeString), cCusName, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('cInvName', System.TypeInfo(UnicodeString), cInvName, []);
    lMessage.Write('Ybm', System.TypeInfo(UnicodeString), Ybm, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('Cplx', System.TypeInfo(UnicodeString), Cplx, []);
    lMessage.Write('iDMoney', System.TypeInfo(UnicodeString), iDMoney, []);
    lMessage.Write('iYunfei', System.TypeInfo(UnicodeString), iYunfei, []);
    lMessage.Write('DJBH', System.TypeInfo(UnicodeString), DJBH, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    __DispatchAsyncRequest('Insert_Sale', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_Insert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                                               const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Insert_Rd01');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/Insert_Rd01', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'Insert_Rd01', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Rd01');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCode', System.TypeInfo(UnicodeString), cCode, []);
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('iUnitCost', System.TypeInfo(UnicodeString), iUnitCost, []);
    lMessage.Write('iMoney', System.TypeInfo(UnicodeString), iMoney, []);
    lMessage.Write('cMemo1', System.TypeInfo(UnicodeString), cMemo1, []);
    __DispatchAsyncRequest('Insert_Rd01', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure Txxykt_AsyncProxy.Invoke_VenInv(const cVenCode: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('VenInv');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 
                                               'remap_load_data_mx', 'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['http://xxykt.org/VenInv', '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 
                                               'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 
                                               'http://xxykt.org/', 'VenInv', 'http://xxykt.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'VenInv');
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    __DispatchAsyncRequest('VenInv', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function Txxykt_AsyncProxy.Retrieve_Load_Data_mx: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Load_Data_mx');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Load_Data_mxResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Load_Inv: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Load_Inv');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Load_InvResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Load_Cus: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Load_Cus');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Load_CusResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Load_Ven: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Load_Ven');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Load_VenResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Customer_YE: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Customer_YE');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Customer_YEResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Insert_Sale: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Insert_Sale');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Insert_SaleResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_Insert_Rd01: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Insert_Rd01');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Insert_Rd01Result', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxy.Retrieve_VenInv: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('VenInv');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('VenInvResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'xxykt';
  exit;
end;

function Txxykt_AsyncProxyEx.BeginLoad_Data_mx(const sid: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Load_Data_mx', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Load_Data_mx', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Data_mx');
    lMessage.Write('sid', System.TypeInfo(UnicodeString), sid, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginLoad_Inv(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Load_Inv', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Load_Inv', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Inv');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginLoad_Cus(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Load_Cus', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Load_Cus', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Cus');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginLoad_Ven(const cwhere: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Load_Ven', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Load_Ven', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Load_Ven');
    lMessage.Write('cwhere', System.TypeInfo(UnicodeString), cwhere, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginCustomer_YE(const cCusCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Customer_YE', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Customer_YE', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Customer_YE');
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginInsert_Sale(const cState: UnicodeString; const dDate: UnicodeString; const cCusCode: UnicodeString; const cCusName: UnicodeString; const cInvCode: UnicodeString; const cInvName: UnicodeString; 
                                              const Ybm: UnicodeString; const iQuantity: UnicodeString; const Cplx: UnicodeString; const iDMoney: UnicodeString; const iYunfei: UnicodeString; const DJBH: UnicodeString; 
                                              const cCarNo: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Insert_Sale', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Insert_Sale', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Sale');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCusCode', System.TypeInfo(UnicodeString), cCusCode, []);
    lMessage.Write('cCusName', System.TypeInfo(UnicodeString), cCusName, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('cInvName', System.TypeInfo(UnicodeString), cInvName, []);
    lMessage.Write('Ybm', System.TypeInfo(UnicodeString), Ybm, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('Cplx', System.TypeInfo(UnicodeString), Cplx, []);
    lMessage.Write('iDMoney', System.TypeInfo(UnicodeString), iDMoney, []);
    lMessage.Write('iYunfei', System.TypeInfo(UnicodeString), iYunfei, []);
    lMessage.Write('DJBH', System.TypeInfo(UnicodeString), DJBH, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginInsert_Rd01(const cState: UnicodeString; const dDate: UnicodeString; const cCode: UnicodeString; const cVenCode: UnicodeString; const cCarNo: UnicodeString; const cInvCode: UnicodeString; 
                                              const iQuantity: UnicodeString; const iUnitCost: UnicodeString; const iMoney: UnicodeString; const cMemo1: UnicodeString; const aCallback: TROAsyncCallback; 
                                              const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/Insert_Rd01', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'Insert_Rd01', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'Insert_Rd01');
    lMessage.Write('cState', System.TypeInfo(UnicodeString), cState, []);
    lMessage.Write('dDate', System.TypeInfo(UnicodeString), dDate, []);
    lMessage.Write('cCode', System.TypeInfo(UnicodeString), cCode, []);
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    lMessage.Write('cCarNo', System.TypeInfo(UnicodeString), cCarNo, []);
    lMessage.Write('cInvCode', System.TypeInfo(UnicodeString), cInvCode, []);
    lMessage.Write('iQuantity', System.TypeInfo(UnicodeString), iQuantity, []);
    lMessage.Write('iUnitCost', System.TypeInfo(UnicodeString), iUnitCost, []);
    lMessage.Write('iMoney', System.TypeInfo(UnicodeString), iMoney, []);
    lMessage.Write('cMemo1', System.TypeInfo(UnicodeString), cMemo1, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.BeginVenInv(const cVenCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_customer_ye', 'remap_insert_rd01', 'remap_insert_sale', 'remap_load_cus', 'remap_load_data_mx', 
                               'remap_load_inv', 'remap_load_ven', 'remap_veninv', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://xxykt.org/VenInv', 
                               '*', 'http://xxtdrj.gnway.cc:81/xxykt.asmx', '*', 'http://xxykt.org/Customer_YE', 'http://xxykt.org/Insert_Rd01', 'http://xxykt.org/Insert_Sale', 'http://xxykt.org/Load_Cus', 
                               'http://xxykt.org/Load_Data_mx', 'http://xxykt.org/Load_Inv', 'http://xxykt.org/Load_Ven', 'http://xxykt.org/VenInv', 'http://xxykt.org/', 'VenInv', 'http://xxykt.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'xxykt', __InterfaceName, 'VenInv');
    lMessage.Write('cVenCode', System.TypeInfo(UnicodeString), cVenCode, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndLoad_Data_mx(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Load_Data_mxResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndLoad_Inv(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Load_InvResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndLoad_Cus(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Load_CusResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndLoad_Ven(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Load_VenResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndCustomer_YE(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Customer_YEResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndInsert_Sale(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Insert_SaleResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndInsert_Rd01(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('Insert_Rd01Result', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function Txxykt_AsyncProxyEx.EndVenInv(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('VenInvResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(Ixxykt_IID, Txxykt_Proxy);
finalization
  UnregisterProxyClass(Ixxykt_IID);
end.
